/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LandingRouteImport } from './routes/landing'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardJunkRouteImport } from './routes/dashboard/junk'
import { Route as DashboardInboxRouteImport } from './routes/dashboard/inbox'
import { Route as DashboardDraftRouteImport } from './routes/dashboard/draft'

const LandingRoute = LandingRouteImport.update({
  id: '/landing',
  path: '/landing',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardJunkRoute = DashboardJunkRouteImport.update({
  id: '/junk',
  path: '/junk',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardInboxRoute = DashboardInboxRouteImport.update({
  id: '/inbox',
  path: '/inbox',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardDraftRoute = DashboardDraftRouteImport.update({
  id: '/draft',
  path: '/draft',
  getParentRoute: () => DashboardRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/landing': typeof LandingRoute
  '/dashboard/draft': typeof DashboardDraftRoute
  '/dashboard/inbox': typeof DashboardInboxRoute
  '/dashboard/junk': typeof DashboardJunkRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/landing': typeof LandingRoute
  '/dashboard/draft': typeof DashboardDraftRoute
  '/dashboard/inbox': typeof DashboardInboxRoute
  '/dashboard/junk': typeof DashboardJunkRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/landing': typeof LandingRoute
  '/dashboard/draft': typeof DashboardDraftRoute
  '/dashboard/inbox': typeof DashboardInboxRoute
  '/dashboard/junk': typeof DashboardJunkRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/dashboard'
    | '/landing'
    | '/dashboard/draft'
    | '/dashboard/inbox'
    | '/dashboard/junk'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/dashboard'
    | '/landing'
    | '/dashboard/draft'
    | '/dashboard/inbox'
    | '/dashboard/junk'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/dashboard'
    | '/landing'
    | '/dashboard/draft'
    | '/dashboard/inbox'
    | '/dashboard/junk'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  LandingRoute: typeof LandingRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/landing': {
      id: '/landing'
      path: '/landing'
      fullPath: '/landing'
      preLoaderRoute: typeof LandingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/junk': {
      id: '/dashboard/junk'
      path: '/junk'
      fullPath: '/dashboard/junk'
      preLoaderRoute: typeof DashboardJunkRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/inbox': {
      id: '/dashboard/inbox'
      path: '/inbox'
      fullPath: '/dashboard/inbox'
      preLoaderRoute: typeof DashboardInboxRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/draft': {
      id: '/dashboard/draft'
      path: '/draft'
      fullPath: '/dashboard/draft'
      preLoaderRoute: typeof DashboardDraftRouteImport
      parentRoute: typeof DashboardRoute
    }
  }
}

interface DashboardRouteChildren {
  DashboardDraftRoute: typeof DashboardDraftRoute
  DashboardInboxRoute: typeof DashboardInboxRoute
  DashboardJunkRoute: typeof DashboardJunkRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardDraftRoute: DashboardDraftRoute,
  DashboardInboxRoute: DashboardInboxRoute,
  DashboardJunkRoute: DashboardJunkRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  DashboardRoute: DashboardRouteWithChildren,
  LandingRoute: LandingRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
